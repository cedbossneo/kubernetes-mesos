#!/usr/bin/env bash

# Run etcd, mesos-local, km apiserver, km controller-manager, and km scheduler.
# Exiting (or failure of) this script will cause the above sub-processes to be killed.
# Usage: km-local
# Mac support requires gtimeout & pcregrep (brew install coreutils && brew install pcre)
# Inputs:
# PUBLIC_IP - IP the km components will listen on
# MESOS_IP - IP that mesos is accessible on
# MESOS_PORT - Port that mesos-master is accessible on (default 5050)
# ETCD_IP - IP that etcd is accessible on
# ETCD_PORT - Port that etcd is accessible on (default 4001)
# LOG_DIR - Directory to write logs to (default /tmp/k8sm-logs)

set -e

# add the current dir to PATH
bin=$(cd $(dirname $0) && pwd -P)
export PATH=$PATH:${bin}

# validate required scripts
cmd-exists "await-service"

# add kubernetes-mesos/bin to PATH (unless km-local has been moved)
k8sm_bin=$(cd ${bin}/../../bin && pwd -P)
[ -d "$k8sm_bin" ] && [ -e "${k8sm_bin}/km" ] && export PATH=$PATH:${k8sm_bin} || true

# validate required binaries
cmd-exists "km"

TIMEOUT=$(which timeout || true)
if ! cmd-exists "timeout"; then
    # mac homebrew installs gnu coreutils with g- prefix
    ! cmd-exists "gtimeout" && echo "timeout or gtimeout command not found" && exit 1
    TIMEOUT=$(which gtimeout)
fi

PUBLIC_IP=$(publicip)

set -e

export K8SM_IP=${PUBLIC_IP}
export K8SM_PORT=8888
echo "Kubernetes: ${K8SM_IP}:${K8SM_PORT}"

export MESOS_IP=${MESOS_IP:-$PUBLIC_IP}
export MESOS_PORT=${MESOS_PORT:-5050}
export MESOS_MASTER=${MESOS_IP}:${MESOS_PORT}
echo "Mesos: ${MESOS_MASTER}"

export ETCD_IP=${ETCD_IP:-$PUBLIC_IP}
export ETCD_PORT=${ETCD_PORT:-4001}
export ETCD_URL=http://${ETCD_IP}:${ETCD_PORT}
echo "Etcd: ${ETCD_URL}"


K8SM_CONFIG="$(pwd)/mesos-cloud.conf"
echo "Config: ${K8SM_CONFIG}"
if [ ! -f "$K8SM_CONFIG" ]; then
    echo "Writing default config"
    echo "[mesos-cloud]
        http-client-timeout = 5s
        state-cache-ttl     = 20s
    " > $K8SM_CONFIG
fi

LOG_DIR=${LOG_DIR:-"/tmp/k8sm-logs"}
mkdir -p ${LOG_DIR}
echo "Log Dir: ${LOG_DIR}"

echo "---------------------"


SUBPROCS=()
SUBPROC_NAMES=()

pid_running () {
    local CMD_PID=$1
    return $(kill -0 ${CMD_PID} &> /dev/null)
}

# Add the pid of a sub-process or exit if it is not running
add_subproc () {
    local SUBPROC=$1
    local SUBPROC_NAME="$2"
    echo "Started ${SUBPROC_NAME} (${SUBPROC})"
    if ! ps aux | grep -v grep | grep "${SUBPROC_NAME}" &> /dev/null; then
        echo "Failed to start ${SUBPROC_NAME}"
        exit 1
    fi
#    echo "Running ${SUBPROC_NAME} (${SUBPROC})"
    SUBPROCS+=(${SUBPROC})
    SUBPROC_NAME=${SUBPROC_NAME// /_} # replace spaces with underscores (bash arrays are space deliniated)
    SUBPROC_NAMES+=(${SUBPROC_NAME})
}

# Kill subprocesses in reverse order of being started (to avoid log spam)
kill_subprocs () {
    SIGNAL=$1
    echo "Shutting down [km-local] (Signal: ${SIGNAL}) ${#SUBPROCS[@]}"
    if [ ! -z "${SUBPROCS}" ]; then
        for ((i=${#SUBPROCS[@]}-1; i>=0; i--)); do
            local SUBPROC=${SUBPROCS[i]}
            local SUBPROC_NAME=${SUBPROC_NAMES[i]}
            local SUBPROC_NAME=${SUBPROC_NAME//_/ } # replace underscores with spaces
            if pid_running "${SUBPROC}"; then
                echo "Killing ${SUBPROC_NAME} (${SUBPROC})"
                #TODO(karl): propegate the recieved signal, instead of just TERM
                kill ${SUBPROC} || true
            fi
        done
    fi
    if [ "${SIGNAL}" != "EXIT" ]; then
        trap EXIT
    fi
}

# propergate SIGINT & SIGTERM
for sig in INT TERM EXIT; do
    trap "kill_subprocs ${sig}" ${sig}
done

echo "Detecting etcd"
await-service ${ETCD_IP} ${ETCD_PORT}
echo "---------------------"


echo "Detecting mesos-master"
await-service ${MESOS_IP} ${MESOS_PORT}
echo "---------------------"

echo "Starting km apiserver &> ${LOG_DIR}/apiserver.log"
km apiserver \
  --address=${K8SM_IP} \
  --etcd_servers=${ETCD_URL} \
  --portal_net=10.10.10.0/24 \
  --port=${K8SM_PORT} \
  --cloud_provider=mesos \
  --cloud_config=${K8SM_CONFIG} \
  &> ${LOG_DIR}/apiserver.log \
  &
add_subproc "$!" "km apiserver"
await-service "${K8SM_IP}" ${K8SM_PORT}
echo "---------------------"


echo "Starting km controller-manager &> ${LOG_DIR}/controller-manager.log"
km controller-manager \
  --master=${K8SM_IP}:${K8SM_PORT} \
  --cloud_config=${K8SM_CONFIG} \
  &> ${LOG_DIR}/controller-manager.log \
  &
add_subproc "$!" "km controller-manager"
echo "---------------------"


echo "Starting km scheduler &> ${LOG_DIR}/scheduler.log"
km scheduler \
  --mesos_master=${MESOS_MASTER} \
  --address=${K8SM_IP} \
  --etcd_servers=${ETCD_URL} \
  --mesos_user=root \
  --api_servers=${K8SM_IP}:${K8SM_PORT} \
  &> ${LOG_DIR}/scheduler.log \
  &
add_subproc "$!" "km scheduler"
echo "---------------------"

for subproc in "${SUBPROCS[@]}"; do
    if pid_running "${subproc}"; then
        echo "Waiting on ${subproc}"
        wait ${subproc}
    fi
done
